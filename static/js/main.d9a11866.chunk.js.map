{"version":3,"sources":["components/searchbox/SearchBox.component.jsx","components/card/Card.component.jsx","components/card-list/CardList.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","react_default","a","createElement","className","type","id","name","placeholder","onChange","handleChange","Card","alt","src","concat","monster","img","email","CardList","monsters","map","Card_component_Card","key","App","state","searchField","search","e","_this","setState","target","value","_this2","this","fetch","then","response","json","users","_this3","filterMonsters","filter","toLowerCase","includes","SearchBox_component_SearchBox","CardList_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAIaA,SAAY,SAACC,GAAD,OAErBC,EAAAC,EAAAC,cAAA,SACAC,UAAU,YACVC,KAAK,SACLC,GAAG,SACHC,KAAK,SACLC,YAAaR,EAAMQ,YACnBC,SAAUT,EAAMU,iBCPPC,SAAO,SAAAX,GAChB,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKS,IAAI,UAAUC,IAAG,wBAAAC,OAA0Bd,EAAMe,QAAQT,GAAxC,eAAyDN,EAAMgB,KACrFf,EAAAC,EAAAC,cAAA,UAAKH,EAAMe,QAAQR,MACnBN,EAAAC,EAAAC,cAAA,SAAIH,EAAMe,QAAQE,UCJbC,SAAW,SAAAlB,GACpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEXJ,EAAMmB,SAASC,IAAI,SAAAL,GAAO,OACxBd,EAAAC,EAAAC,cAACkB,EAAD,CAAMC,IAAKP,EAAQT,GAAIS,QAASA,SCwB/BQ,oNA3BbC,MAAQ,CACNL,SAAS,GACTM,YAAY,MAGdC,OAAS,SAAAC,GAAMC,EAAKC,SAAS,CAACJ,YAAaE,EAAEG,OAAOC,4FAEjC,IAAAC,EAAAC,KACjBC,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIN,EAAKH,SAAS,CAACV,SAAUmB,uCAGlC,IAAAC,EAAAN,KACAO,EAAiBP,KAAKT,MAAML,SAASsB,OAAO,SAAA1B,GAAO,OACtDA,EAAQR,KAAKmC,cAAcC,SAASJ,EAAKf,MAAMC,YAAYiB,iBAE9D,OACEzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,oBACAH,EAAAC,EAAAC,cAACyC,EAAD,CAAWpC,YAAY,iBAAiBE,aAAcuB,KAAKP,SAC3DzB,EAAAC,EAAAC,cAAC0C,EAAD,CAAU1B,SAAUqB,YAtBVM,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.d9a11866.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport '../searchbox/SearchBox.styles.css';\r\n\r\nexport const SearchBox = (props) =>(\r\n\r\n    <input\r\n    className=\"SearchBox\"\r\n    type=\"search\"\r\n    id=\"search\"\r\n    name=\"search\"\r\n    placeholder={props.placeholder}\r\n    onChange={props.handleChange}                \r\n    />\r\n\r\n)\r\n            \r\n ","import React from 'react';\r\n\r\nimport './Card.styles.css';\r\n\r\n\r\nexport const Card = props => {\r\n    return(\r\n    <div className=\"Card\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&`}>{props.img}</img>\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nimport { Card } from '../card/Card.component';\r\n\r\nimport './CardList.styles.css';\r\n\r\nexport const CardList = props => {\r\n    return(\r\n        <div className=\"CardList\">\r\n            {\r\n            props.monsters.map(monster => (\r\n              <Card key={monster.id} monster={monster}/>\r\n              ))\r\n           }\r\n        </div>\r\n    );\r\n}","import React, { Component } from 'react';\n\nimport { SearchBox } from './components/searchbox/SearchBox.component';\nimport { CardList } from './components/card-list/CardList.component';\n\nimport './App.css';\n\nclass App extends Component {\n  state = {   \n    monsters:[],\n    searchField:\"\"\n  }\n\n  search = e => {this.setState({searchField: e.target.value})}\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n\n  render(){\n    const filterMonsters = this.state.monsters.filter(monster =>\n       monster.name.toLowerCase().includes(this.state.searchField.toLowerCase())\n       );\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-title\">Monsters Rolodex</h1>\n        <SearchBox placeholder='search monster' handleChange={this.search}/>\n        <CardList monsters={filterMonsters}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}